/*
Specify the relevant config based on execution context
*/

params.outdir = "results"

process.container = "ikmb/outbreak-monitoring:latest"

profiles {

	standard {
		includeConfig 'conf/base.config'
		includeConfig 'conf/singularity.config'
		includeConfig 'conf/rzcluster.config'
	
	}

}

/***********************
    Pipeline Info
 **********************/

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
        enabled = true
        file = "${params.outdir}/pipeline_info/outbreak-monitoring.html"
}
report {
        enabled = true
        file = "${params.outdir}/pipeline_info/outbreak-monitoring.html"
}
trace {
        enabled = true
        file = "${params.outdir}/pipeline_info/outbreak-monitoring.txt"
}
dag {
        enabled = true
        file = "${params.outdir}/pipeline_info/outbreak-monitoring.svg"
}

manifest {
        homePage = 'https://github.com/marchoeppner/outbreak-monitoring.git'
        description = 'This pipeline processes and bins bacterial genome data for downstream analysis.'
        mainScript = 'main.nf'
        version = '1.1'
        nextflowVersion = '20.01.0'
}


filter_folder = "$baseDir/filter"

params {

	bloomfilter = "$filter_folder/Acinetobacter_baumannii.bf $filter_folder/Enterococcus_faecalis_V583.bf $filter_folder/Staphylococcus_aureus_NCTC8325.bf $filter_folder/Streptococcus_pneumoniae_R6.bf $filter_folder/Escherichia_coli_K12.bf $filter_folder/Klebsiella_pneumoniae.bf $filter_folder/Pseudomonas_aeruginosa_PAO1.bf $filter_folder/Enterobacter_cloacae.bf  $filter_folder/Enterococcus_faecium.bf $filter_folder/Klebsiella_oxytoca.bf $filter_folder/Serratia_marcescens.bf $filter_folder/Proteus_mirabilis.bf $filter_folder/Citrobacter_freundii.bf $filter_folder/Klebsiella_aerogenes.bf $filter_folder/Morganella_morganii.bf"

}

params {
  max_memory = 120.GB
  max_cpus = 16
  max_time = 240.h
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }	
}
